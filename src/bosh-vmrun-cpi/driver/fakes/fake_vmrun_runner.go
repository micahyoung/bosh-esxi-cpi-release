// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-vmrun-cpi/driver"
	"sync"
)

type FakeVmrunRunner struct {
	CliCommandStub        func([]string, map[string]string) (string, error)
	cliCommandMutex       sync.RWMutex
	cliCommandArgsForCall []struct {
		arg1 []string
		arg2 map[string]string
	}
	cliCommandReturns struct {
		result1 string
		result2 error
	}
	cliCommandReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVmrunRunner) CliCommand(arg1 []string, arg2 map[string]string) (string, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.cliCommandMutex.Lock()
	ret, specificReturn := fake.cliCommandReturnsOnCall[len(fake.cliCommandArgsForCall)]
	fake.cliCommandArgsForCall = append(fake.cliCommandArgsForCall, struct {
		arg1 []string
		arg2 map[string]string
	}{arg1Copy, arg2})
	fake.recordInvocation("CliCommand", []interface{}{arg1Copy, arg2})
	fake.cliCommandMutex.Unlock()
	if fake.CliCommandStub != nil {
		return fake.CliCommandStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.cliCommandReturns.result1, fake.cliCommandReturns.result2
}

func (fake *FakeVmrunRunner) CliCommandCallCount() int {
	fake.cliCommandMutex.RLock()
	defer fake.cliCommandMutex.RUnlock()
	return len(fake.cliCommandArgsForCall)
}

func (fake *FakeVmrunRunner) CliCommandArgsForCall(i int) ([]string, map[string]string) {
	fake.cliCommandMutex.RLock()
	defer fake.cliCommandMutex.RUnlock()
	return fake.cliCommandArgsForCall[i].arg1, fake.cliCommandArgsForCall[i].arg2
}

func (fake *FakeVmrunRunner) CliCommandReturns(result1 string, result2 error) {
	fake.CliCommandStub = nil
	fake.cliCommandReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVmrunRunner) CliCommandReturnsOnCall(i int, result1 string, result2 error) {
	fake.CliCommandStub = nil
	if fake.cliCommandReturnsOnCall == nil {
		fake.cliCommandReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.cliCommandReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVmrunRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cliCommandMutex.RLock()
	defer fake.cliCommandMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVmrunRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.VmrunRunner = new(FakeVmrunRunner)
